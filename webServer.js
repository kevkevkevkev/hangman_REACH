"use strict";
/* jshint node: true */

/*
 * This webserver listens, alternatively, to port 3000 for testing on LOCALHOST:3000
 * or to process.env.PORT, the environment variable generated by Heroku for the port 
 * for this instance of the server.
 *
 * Note that anyone able to connect to localhost:portNo will be able to fetch any file accessible
 * to the current user in the current directory or any of its children.
 */


/*************************
 * Module Initialization *
 *************************/

var mongoose = require('mongoose');
var async = require('async');
var session = require('cookie-session');
var bodyParser = require('body-parser');
var fs = require("fs");
var moment = require('moment');


/**************************
 * Database Configuration *
 **************************/

// Load the Mongoose schema for User and SchemaInfo
var User = require('./schema/user.js');
var SchemaInfo = require('./schema/schemaInfo.js');

var express = require('express');
var app = express();

/* Connect to mLab Mongoose using the secret environment variable generated by 
 * Heroku for this instance. */
const mongoURI = process.env.MONGODB_URI || "mongodb://localhost/myapp";
mongoose.connect(mongoURI);

/**************************
 * Passport Configuration *
 **************************/

var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;

passport.use(new LocalStrategy({
    usernameField: 'email_address'
  },
  function(username, password, done) {
    User.findOne({ email_address: username }, function (err, user) {
      if (err) { return done(err); }
      // Return if user not found in database
      if (!user) {
        return done(null, false, {
          message: 'User not found'
        });
      }
      // Return if password is wrong
      if (!user.validPassword(password)) {
        return done(null, false, {
          message: 'Password is wrong'
        });
      }
      // If credentials are correct, return the user object
      return done(null, user);
    });
  }
));

app.use(passport.initialize());

/*************************
 * Session Configuration *
 *************************/

// Activate the express static module
app.use(express.static(__dirname));
// Give the session key and other parameters
app.use(session({
    secret: 'secretKey', 
    //secret: process.env.SECRET_KEY,
    resave: false,
    saveUninitialized: false
}));

// Activate bodyParser. 
app.use(bodyParser.json());

app.get('/', function (request, response) {
    response.send('Simple web server of files from ' + __dirname);
});

/*
 * URL /session - Returns whether there is an active session
 */
app.get('/session', function(request, response) {

    if (request.session.login_name) {
        response.end(JSON.stringify(true));
    } else {
        response.end(JSON.stringify(false));
    }
});

/*
 * URL /current-session - Returns the current session, to be saved
 * in local storage for purposes of restoring the session
 */
app.get('/get-current-session', function(request, response) {

    console.log("returning current session", JSON.stringify(request.session));
    response.end(JSON.stringify(request.session));
});

/*
 * URL /restore-session - Returns the current session from the session
 * saved in local storage and returns the user associated with that session's
 * user.
 */
app.post('/restore-session', function(request, response) {

    var email_address = request.body.email_address;
    console.log("Restoring session for user with email_address:", email_address);

    User.findOne({email_address: email_address}, function (err, user) {    
        if (err) {
            // Query returned an error.
            response.status(400).send(JSON.stringify(err));
            return;
        }
        if (!user) {
            // If no user found, report an error.
            response.status(400).send('Missing user');
            return;
        }
        if (user.length === 0) {
            // Query didn't return an error but didn't find the SchemaInfo object
            console.log("user.length === 0");
            response.status(400).send('Missing user');
            return;
        }

        // Create new session, which will be part of the request, so we have access on all routes
        request.session.email_address = email_address;
        request.session.user_id = user._id;
        request.session.user = user;

        // Send session back
        console.log('user', user);
        //response.send(session);
        response.end(JSON.stringify(user));
    }); 
});


/***********************************
 * Login and Registration Handling *
 ***********************************/

/* If a user has entered a valid login_name and password combination,
 * logs in as that account. 
 */
app.post('/admin/login', function (request, response) {

    var email_address = request.body.email_address.toLowerCase();
    var password = request.body.password;

    // Use passport local strategy to authenticate from email_address and password stored locally
    console.log("About to authenticate user");
    passport.authenticate('local', function(err, user, info){
        console.log("Authentication successful");
        var token;

        // If Passport throws/catches an error
        if (err) {
          response.status(404).json(err);
          return;
        }

        if(user){
            request.session.email_address = email_address;
            request.session.user_id = user._id;
            request.session.user = user;               
            token = user.generateJwt();
            user.token = token;
            console.log('user', user);
            response.end(JSON.stringify(user));                       
        } else {
          // If user is not found
          response.status(401).json(info);
        }
    })(request, response);     
});

// Logout from the current account
app.post('/admin/logout', function (request, response) {

    if (!request.session.email_address) {
        response.status(401).send("No user logged in");
        return;
    } else {
        request.session = null;
        response.send("Logout success");
    }
});

// Register a new user
app.post('/admin/register', function (request, response) {

    console.log("app.post: registering a new user");

    // If a user with the entered login name already exists, return an error
    User.findOne({email_address: request.body.email_address}, function (err, user) {
        if (user) {
            response.status(400).send('That user already exists');
            return;
        }

        var user = new User();

        user.email_address = request.body.email_address.toLowerCase(); // Email Address / Login
        user.first_name = request.body.first_name; // First name of the user.

        user.setPassword(request.body.password);    

        user.save(function(err) {
            var token;
            token = user.generateJwt();
            response.status(200);
            response.json({
                "token" : token
            });
            console.log("Created userObject with ID", user._id);
            response.end(JSON.stringify(user));        
        });    
    });
});

/*****************
 * Game Handling *
 *****************/

/*
 * URL /game/get_word - Retrieve a word from the LinkedIn REST API 
 */
app.get('/game/get_word', function (request, response) {
    console.log("get_word called (server side)");
    if (!request.session.email_address) {
        response.status(401).send("No user logged in");
        return;
    }

    var lexiconArray = [];
    var word = {};
    var req = require('request');

    // Retrieve the words from the LinkedIn REST API
    req('http://app.linkedin-reach.io/words', { json: true }, (err, res, body) => {
        if (err) { 
            response.status(400).send(JSON.stringify(err));
            return console.log(err); 
        }

        // Store the words in an array
        lexiconArray = body.split("\n");

        // Select a word from the array at random
        word.text = lexiconArray[Math.floor(Math.random()*lexiconArray.length)];
        response.end(JSON.stringify(word));
    });
});

/*
 * URL /game/update_score/:outcome - Update the session user's score after a game
 */
app.post('/game/update_score/:outcome', function (request, response) {

    if (!request.session.email_address) {
        response.status(401).send("No user logged in");
        return;
    }

    var outcome = request.params.outcome;

    console.log("Server: Updating user score with ", JSON.stringify(outcome));

    // Retrieve the session user
    User.findOne({_id: request.session.user._id}).exec(function(err, user) {
        if (err) {
            // Query returned an error.
            response.status(400).send(JSON.stringify(err));
            return;
        }
        if (!user) {
            // If no user found, report an error.
            response.status(400).send('Missing user');
            return;
        }

        // Update the user wins or losses depending on whether they won
        if (outcome==1) {
            user.wins = user.wins+1;
        }
        if (outcome==0) {
            user.losses = user.losses+1;
        }
        console.log("User updated: ", user);
        user.save();
    });
});

/***************
 * Leaderboard *
 ***************/

/*
 * URL /leaderboard/get_users - Retrieve all the users who have played
 * at least one game 
 */
app.get('/leaderboard/get_users', function (request, response) {

    console.log("Server received user retrieval request");

    if (!request.session.email_address) {
        response.status(401).send("No user logged in");
        return;
    }

    // Get the users who have won or lost at least one game stored in the database
    User.find({$or:[{wins: { $gt : 0}}, {losses: { $gt: 0}}]}).exec(function (err, users) {
        if (err) {
            // Query returned an error.
            response.status(400).send(JSON.stringify(err));
            return;
        }
        if (!users) {
            response.status(400).send("Missing users");
            return;
        }
        if (users.length === 0) {
            // Query didn't return an error but didn't find the SchemaInfo object - This
            // is also an internal error return.
            var empty_array = [];
            respnse.status(200).send(JSON.stringify(empty_array));
            return;
        }

        // We got the object - create an array version of it in JSON
        var usersArray = JSON.parse(JSON.stringify(users));
        console.log('users', users);
        response.end(JSON.stringify(users));
    });        
});


/************************
 * Server Configuartion *
 ************************/

var server = app.listen(process.env.PORT || 3000, function () {
    var port = server.address().port;
    console.log('Listening at port' + port + ' exporting the directory ' + __dirname);
});


